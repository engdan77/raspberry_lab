from gpiozero import Device, LED, PWMLED, Button
from gpiozero.pins.mock import MockFactory
from unittest.mock import Mock
import pygame.mixer as mixerenhet
import time
import sys
from cowsay import kitty as s칛ger

if sys.platform == 'darwin':
    Device.pin_factory = MockFactory()
    temperatur_l칛sare = Mock(return_value=(80, 21))
    temperatur_enhet = Mock()
    PWMLED = Mock()
else:
    import Adafruit_DHT
    temperatur_enhet = Adafruit_DHT.DHT11
    temperatur_l칛sare = Adafruit_DHT.read_retry

EN_SEKUND = 1

v칛nster_칬ga = LED(23)
h칬ger_칬ga = LED(24)
nos = PWMLED(18)
mun = Button(22)
h칬rsel = Button(27)
temperatur_pinne = 25


class Hund():
    def __init__(self, namn):
        self.namn = namn
        self.hj칛rtslag_r칛knare = 0
        self.f칬dsel_temperatur = self.k칛nn_temperatur()
        h칬rsel.when_activated = self.apport
        mun.when_activated = self.칛t
        s칛ger(f"Vov!!! nu 칛r jag f칬dd och jag heter {self.namn}...\n"
              f"Nu n칛r jag f칬ddes s친 칛r jag {self.f칬dsel_temperatur} grader")
        mixerenhet.init()
        self.sk칛ll()

    def sl친_hj칛rtslag(self, hj칛rtslag_per_sekund=10):
        time.sleep(EN_SEKUND / hj칛rtslag_per_sekund)
        self.hj칛rtslag_r칛knare = self.hj칛rtslag_r칛knare + 1

    def nollst칛ll_hj칛rtslag(self):
        self.hj칛rtslag_r칛knare = 0

    def k칛nn_temperatur(self, pinne=temperatur_pinne, antal_f칬rs칬k=10, normal_temp=23):
        fuktighet, temperatur = temperatur_l칛sare(temperatur_enhet, pinne, retries=antal_f칬rs칬k)
        return temperatur or normal_temp

    def dax_att_k칛nna_efter(self, efter_hur_m친nga_hj칛rtslag=100):
        self.hj칛rtslag_r칛knare = self.hj칛rtslag_r칛knare + 1
        if self.hj칛rtslag_r칛knare > efter_hur_m친nga_hj칛rtslag:
            self.nollst칛ll_hj칛rtslag()
            return True
        else:
            return False

    def blinka_칬gonen(self, tid=0.5, antal=6):
        v칛nster_칬ga.blink(on_time=tid, off_time=tid, n=antal)
        h칬ger_칬ga.blink(on_time=tid, off_time=tid, n=antal)

    def pulsera_nosen(self, tid_sekunder=1, antal=4):
        nos.pulse(fade_in_time=tid_sekunder, fade_out_time=tid_sekunder, n=antal, background=False)

    def apport(self):
        print(self.namn, 'springer apport 游붮')
        self.blinka_칬gonen(0.2, 10)  # Snabbare 칛n vanligt
        self.sk칛ll()

    def 칛t(self):
        print(self.namn, '칛ter gladligen 游꺐')
        self.blinka_칬gonen()
        mixerenhet.music.load('ljud/eat.mp3')
        mixerenhet.music.play()

    def sk칛ll(self):
        mixerenhet.music.load('ljud/vov.mp3')
        mixerenhet.music.play()

    def lev(self, v칛rmeslag_temparatur_칬kning=1):
        while True:
            self.sl친_hj칛rtslag()
            if self.dax_att_k칛nna_efter() is True:
                temperatur_just_nu = self.k칛nn_temperatur()
                print("Grr.. min p칛ls just nu 칛r", temperatur_just_nu, "grader")
                if temperatur_just_nu is not None and temperatur_just_nu >= self.f칬dsel_temperatur + v칛rmeslag_temparatur_칬kning:
                    print('游봇')
                    self.pulsera_nosen()


if __name__ == '__main__':
    hugo = Hund(namn='Hugo')
    hugo.lev()