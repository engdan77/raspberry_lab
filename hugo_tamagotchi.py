# Dessa bibliotek anv칛nds f칬r att f칬renkla livet
from gpiozero import Device, LED, PWMLED, Button
from gpiozero.pins.mock import MockFactory
from unittest.mock import Mock
import pygame.mixer as mixerenhet
import time
import sys
from cowsay import kitty as s칛ger

if sys.platform == 'darwin':
    Device.pin_factory = MockFactory()
    temperatur_l칛sare = Mock(return_value=(80, 21))
    temperatur_enhet = Mock()
    PWMLED = Mock()
else:
    import Adafruit_DHT
    temperatur_enhet = Adafruit_DHT.DHT11
    temperatur_l칛sare = Adafruit_DHT.read_retry


# Detta 칛r en s.k. "konstant" variabel bara f칬r g칬ra koden mer l칛ttl칛st l칛ngre ned
EN_SEKUND = 1

# Alla delar (objekt) utav hunden som kommer anv칛ndas med l칛ttl칛sta namn
v칛nster_칬ga = LED(23)
h칬ger_칬ga = LED(24)
nos = PWMLED(18)
mun = Button(22)
h칬rsel = Button(27)
temperatur_pinne = 25

# Detta 칛r i objekt-orienterad-programmering en "klass" som representerar en hund
class Hund():
    def __init__(self, namn):
        # En hund har "egna" egenskaper som inte beh칬ver vara samma f칬r andra hundar
        self.namn = namn
        self.hj칛rtslag_r칛knare = 0
        self.f칬dsel_temperatur = self.k칛nn_temperatur()  # Vad 칛r temperaturen vid f칬dsel f칬r att j칛mf칬ra med senare
        # N칛r vi f칬der en hund vill vi att den ska veta/g칬ra f칬ljande
        h칬rsel.when_activated = self.apport
        mun.when_activated = self.칛t
        s칛ger(f"Vov!!! nu 칛r jag f칬dd och jag heter {self.namn}...\n"
              f"Nu n칛r jag f칬ddes s친 칛r jag {self.f칬dsel_temperatur} grader")
        mixerenhet.init()
        self.sk칛ll()

    def sl친_hj칛rtslag(self, hj칛rtslag_per_sekund=10):
        # Denna "metod" best칛mmer hur ofta/regelbundet hj칛rtat ska sl친
        time.sleep(EN_SEKUND / hj칛rtslag_per_sekund)
        self.hj칛rtslag_r칛knare = self.hj칛rtslag_r칛knare + 1

    def nollst칛ll_hj칛rtslag(self):
        # Vi anv칛nder denna f칬r att best칛mma "intervaller" mellan exempelvis hur ofta hunden ska k칛nna p친 sin p칛ls
        self.hj칛rtslag_r칛knare = 0

    def k칛nn_temperatur(self, pinne=temperatur_pinne, antal_f칬rs칬k=10, normal_temp=23):
        # Denna metod/egenskap kommer l칛ra hunden att k칛nna p친 sin p칛ls
        fuktighet, temperatur = temperatur_l칛sare(temperatur_enhet, pinne, retries=antal_f칬rs칬k)
        return temperatur or normal_temp

    def dax_att_k칛nna_efter(self, efter_hur_m친nga_hj칛rtslag=100):
        # Denna metod 칛r enbart f칬r att svara p친 fr친gan om det 칛r dags f칬r hunden att k칛nna efter sin p칛ls igen
        self.hj칛rtslag_r칛knare = self.hj칛rtslag_r칛knare + 1
        if self.hj칛rtslag_r칛knare > efter_hur_m친nga_hj칛rtslag:
            self.nollst칛ll_hj칛rtslag()
            return True
        else:
            return False

    def blinka_칬gonen(self, tid=0.5, antal=6):
        # Denna metod best칛mmer hur hunden ska blinka med sina 칬gon
        v칛nster_칬ga.blink(on_time=tid, off_time=tid, n=antal)
        h칬ger_칬ga.blink(on_time=tid, off_time=tid, n=antal)

    def pulsera_nosen(self, tid_sekunder=1, antal=4):
        # Denna metod best칛mmer hur hundens n칛sta ska pulsera
        nos.pulse(fade_in_time=tid_sekunder, fade_out_time=tid_sekunder, n=antal, background=False)

    def apport(self):
        # Denna metod kallar vi p친 n칛r vi vill att han ska springa apport
        print(self.namn, 'springer apport 游붮')
        self.blinka_칬gonen(0.2, 10)  # Snabbare 칛n vanligt
        self.sk칛ll()

    def 칛t(self):
        # Denna metod talar om vad som h칛nder n칛r hunden 칛ter
        print(self.namn, '칛ter gladligen 游꺐')
        self.blinka_칬gonen()
        mixerenhet.music.load('ljud/eat.mp3')
        mixerenhet.music.play()

    def sk칛ll(self):
        # Denna metod l칛r hunden hur han ska l친ta n칛r han sk칛ller
        mixerenhet.music.load('ljud/vov.mp3')
        mixerenhet.music.play()

    def lev(self, v칛rmeslag_temparatur_칬kning=1):
        # Denna metod kallar som sista steg vid "init" (f칬dsel) n칛r valpen b칬rjar leva
        while True:
            self.sl친_hj칛rtslag()  # Vi sl친r ett hj칛rtslag
            if self.dax_att_k칛nna_efter() is True:  # Bara om tillr칛ckligt m친nga hj칛rtslag ska hunden k칛nna efter
                temperatur_just_nu = self.k칛nn_temperatur()  # ... d친 ska han k칛nna efter temperatur
                print("Grr.. min p칛ls just nu 칛r", temperatur_just_nu, "grader")
                if temperatur_just_nu is not None and temperatur_just_nu >= self.f칬dsel_temperatur + v칛rmeslag_temparatur_칬kning:
                    # Om temeperaturen 칬verstiger v칛rmeslag ska vi g칬ra nedan
                    print('游봇')
                    self.pulsera_nosen()


# H칛r b칬rjar huvud programmet
hugo = Hund(namn='Hugo')  # Vi f칬der en ny "Hund" med namnet Hugo
hugo.lev()  # Vi talar f칬r hugo att b칬rja leva